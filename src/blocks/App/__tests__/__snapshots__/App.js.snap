// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App match snapshot 1`] = `
<Connect(App)
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <App
    dispatch={[Function]}
    page="default"
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
  >
    <div
      className="App App_mode_default"
      style={Object {}}
    >
      <App-Spinner>
        <div
          className="App-Spinner"
          style={Object {}}
        >
          <Bem
            alt="Loading..."
            elem="SpinnerImg"
            src="spinner-dots.gif"
            tag="img"
          >
            <img
              alt="Loading..."
              className="App-SpinnerImg"
              src="spinner-dots.gif"
            />
          </Bem>
        </div>
      </App-Spinner>
      <Connect(Navbar)
        mode="default"
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <Navbar
          dispatch={[Function]}
          mode="default"
          page="default"
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "unsubscribe": [Function],
            }
          }
        >
          <div
            className="Navbar Navbar_mode_default"
            style={Object {}}
          >
            <Navbar-Logo>
              <div
                className="Navbar-Logo"
                style={Object {}}
              >
                <Bem
                  elem="LogoLink"
                  href="#!"
                  tag="a"
                >
                  <a
                    className="Navbar-LogoLink"
                    href="#!"
                  >
                    <Bem
                      alt="logo"
                      elem="LogoImg"
                      src="Logo.svg"
                      tag="img"
                    >
                      <img
                        alt="logo"
                        className="Navbar-LogoImg"
                        src="Logo.svg"
                      />
                    </Bem>
                  </a>
                </Bem>
              </div>
            </Navbar-Logo>
            <Navbar-Menu>
              <div
                className="Navbar-Menu"
                style={Object {}}
              >
                <Navbar-MenuItem
                  key="#!about"
                  text="About"
                  url="#!about"
                >
                  <a
                    className="Navbar-MenuItem"
                    href="#!about"
                    style={Object {}}
                  >
                    About
                  </a>
                </Navbar-MenuItem>
                <Navbar-MenuItem
                  key="#!projects"
                  text="Projects"
                  url="#!projects"
                >
                  <a
                    className="Navbar-MenuItem"
                    href="#!projects"
                    style={Object {}}
                  >
                    Projects
                  </a>
                </Navbar-MenuItem>
                <Navbar-MenuItem
                  key="#!contacts"
                  text="Contacts"
                  url="#!contacts"
                >
                  <a
                    className="Navbar-MenuItem"
                    href="#!contacts"
                    style={Object {}}
                  >
                    Contacts
                  </a>
                </Navbar-MenuItem>
              </div>
            </Navbar-Menu>
          </div>
        </Navbar>
      </Connect(Navbar)>
      <Connect(View)
        clickHandle={true}
        hashChange={true}
        loadPage={true}
        mode="default"
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <View
          clickHandle={true}
          dispatch={[Function]}
          hashChange={true}
          loadPage={true}
          mode="default"
          page="default"
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
          storeSubscription={
            Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              },
              "unsubscribe": [Function],
            }
          }
        >
          <div
            className="View View_mode_loading"
            style={Object {}}
          >
            <Bem
              elem="ContentWrapper"
              mode="loading"
            >
              <div
                className="View-ContentWrapper"
                mode="loading"
              >
                <Bem
                  elem="Status"
                  tag="p"
                >
                  <p
                    className="View-Status"
                  />
                </Bem>
              </div>
            </Bem>
          </div>
        </View>
      </Connect(View)>
      <Footer
        mode="default"
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <div
          className="Footer Footer_mode_default"
          style={Object {}}
        >
          ...
        </div>
      </Footer>
    </div>
  </App>
</Connect(App)>
`;
